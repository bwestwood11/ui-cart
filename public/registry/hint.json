{
  "name": "hint",
  "type": "registry:ui",
  "registryDependencies": [
    "tooltip"
  ],
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport { motion } from \"framer-motion\";\r\n\r\ntype HintProps = {\r\n  content: string;\r\n  children: React.ReactNode;\r\n  animationFrom?: \"top\" | \"bottom\" | \"left\" | \"right\";\r\n  defaultOpen?: boolean;\r\n  className?: string;\r\n  asChild?: boolean;\r\n  onOpenChange?: (isOpen: boolean) => void;\r\n  isAnimating?: boolean;\r\n  enabled?: boolean;\r\n  delay?: number;\r\n  animationDuration?: number;\r\n  animationStiffness?: number;\r\n};\r\n\r\nexport function Hint({\r\n  content,\r\n  children,\r\n  className,\r\n  animationFrom = \"top\",\r\n  asChild = false,\r\n  defaultOpen = false,\r\n  onOpenChange,\r\n  enabled = true,\r\n  delay = 0,\r\n  animationDuration,\r\n  isAnimating = true,\r\n  animationStiffness = 260,\r\n}: HintProps) {\r\n  // Define the motion variants based on direction\r\n  const variants = {\r\n    initial: {\r\n      opacity: 0,\r\n      x: animationFrom === \"left\" ? -20 : animationFrom === \"right\" ? 20 : 0,\r\n      y: animationFrom === \"top\" ? -20 : animationFrom === \"bottom\" ? 20 : 0,\r\n      scale: 0.8,\r\n    },\r\n    animate: {\r\n      opacity: 1,\r\n      x: 0,\r\n      y: 0,\r\n      scale: 1,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: animationStiffness,\r\n        damping: 10,\r\n        duration: !isAnimating ? 0 : animationDuration,\r\n      },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      x: animationFrom === \"left\" ? -20 : animationFrom === \"right\" ? 20 : 0,\r\n      y: animationFrom === \"top\" ? -20 : animationFrom === \"bottom\" ? 20 : 0,\r\n      scale: 0.6,\r\n    },\r\n  };\r\n  if(!enabled) return <>{children}</>;  \r\n  return (\r\n    <TooltipProvider>\r\n      <Tooltip\r\n        delayDuration={delay}\r\n        onOpenChange={onOpenChange}\r\n        defaultOpen={defaultOpen}\r\n      >\r\n        <TooltipTrigger asChild={asChild}>{children}</TooltipTrigger>\r\n        <TooltipContent side={animationFrom} asChild>\r\n          <motion.p\r\n            variants={variants}\r\n            initial=\"initial\"\r\n            animate=\"animate\"\r\n            exit=\"exit\"\r\n            className={className}\r\n          >\r\n            {content}\r\n          </motion.p>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n    </TooltipProvider>\r\n  );\r\n}",
      "path": "ui/hint.tsx",
      "target": "components/ui/hint.tsx"
    }
  ]
}