{
  "name": "sidebar-02",
  "type": "registry:block",
  "registryDependencies": [
    "progress",
    "https://www.uicart.io/registry/hint.json"
  ],
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  Bell,\r\n  ChevronLeft,\r\n  HelpCircle,\r\n  HomeIcon,\r\n  Layers2,\r\n  LucideIcon,\r\n  Package,\r\n  Settings,\r\n  ShoppingCart,\r\n  User,\r\n} from \"lucide-react\";\r\nimport Link from \"next/link\";\r\nimport { Dispatch, SetStateAction, useState } from \"react\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { Hint } from \"@/components/ui/hint\";\r\nimport { motion } from \"framer-motion\";\r\nimport { usePathname } from \"next/navigation\";\r\n\r\ntype MenuItem = {\r\n  name: string;\r\n  url: string;\r\n  icon: React.FC;\r\n  notifications?: number;\r\n};\r\n\r\nconst menuItems = [\r\n  {\r\n    name: \"Home\",\r\n    url: \"/\",\r\n    icon: HomeIcon,\r\n    notifications: 3,\r\n  },\r\n  {\r\n    name: \"Products\",\r\n    url: \"/products\",\r\n    icon: ShoppingCart,\r\n  },\r\n  {\r\n    name: \"Customers\",\r\n    url: \"/customers\",\r\n    icon: User,\r\n  },\r\n  {\r\n    name: \"Resources\",\r\n    url: \"/resources\",\r\n    icon: Package,\r\n  },\r\n  {\r\n    name: \"Notifications\",\r\n    url: \"/notifications\",\r\n    icon: Bell,\r\n  },\r\n  {\r\n    name: \"Support\",\r\n    url: \"/support\",\r\n    icon: HelpCircle,\r\n  },\r\n  {\r\n    name: \"Settings\",\r\n    url: \"/settings\",\r\n    icon: Settings,\r\n  },\r\n] satisfies MenuItem[];\r\n\r\nconst Sidebar02 = () => {\r\n  const [open, setOpen] = useState(true);\r\n  const currentPathname = usePathname();\r\n  return (\r\n    <motion.aside\r\n      layout\r\n      className=\"sticky top-0 h-screen text-background shrink-0 border-r border-slate-300 bg-white p-2\"\r\n      style={{ width: open ? \"225px\" : \"fit-content\" }}\r\n    >\r\n      <div className=\"flex flex-col gap-y-4 h-full\">\r\n        <TitleSection open={open} />\r\n        <NavigationMenu open={open} currentPathname={currentPathname} />\r\n        <div className=\"mt-auto space-y-2\">\r\n          <UsageMeter open={open} progress={60} />\r\n          <ToggleClose open={open} setOpen={setOpen} />\r\n        </div>\r\n      </div>\r\n    </motion.aside>\r\n  );\r\n};\r\n\r\nconst TitleSection = ({ open }: { open: boolean }) => {\r\n  return (\r\n    <div className=\"py-2\">\r\n      <div className=\"flex cursor-pointer items-center hover:bg-slate-100 rounded-md\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <motion.div layout className=\"bg-primary rounded-md p-2 size-10\">\r\n            <Layers2 className=\"text-primary-foreground\" />\r\n          </motion.div>\r\n          {open && (\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 12 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: 0.125 }}\r\n              layout\r\n            >\r\n              <span className=\"block text-xs font-semibold\">Acme Company</span>\r\n              <span className=\"block text-xs text-background/70\">Pro Plan</span>\r\n            </motion.div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst NavigationMenu = ({\r\n  open,\r\n  currentPathname,\r\n}: {\r\n  open: boolean;\r\n  currentPathname: string;\r\n}) => {\r\n  return (\r\n    <nav>\r\n      <ul className=\"space-y-1\">\r\n        {menuItems &&\r\n          menuItems.map((item) => {\r\n            return (\r\n              <NavigationLink\r\n                key={item.name}\r\n                title={item.name}\r\n                Icon={item.icon}\r\n                href={item.url}\r\n                open={open}\r\n                notifications={item.notifications}\r\n                isActive={currentPathname === item.url}\r\n              />\r\n            );\r\n          })}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst NavigationLink = ({\r\n  title,\r\n  Icon,\r\n  href,\r\n  open,\r\n  notifications,\r\n  isActive,\r\n}: {\r\n  title: string;\r\n  Icon: LucideIcon;\r\n  href: string;\r\n  open: boolean;\r\n  isActive?: boolean;\r\n  notifications?: number;\r\n}) => {\r\n  return (\r\n    <Hint\r\n      delay={100}\r\n      enabled={!open}\r\n      content={title}\r\n      animationFrom=\"left\"\r\n      animationStiffness={150}\r\n    >\r\n      <li className=\"w-full\">\r\n        <Link\r\n          href={href}\r\n          className={cn(\r\n            \"flex items-center px-1 w-full py-2 gap-2 justify-center hover:bg-primary/30 hover:text-primary rounded-md\",\r\n            open && \"justify-start\",\r\n            isActive && \"bg-primary/20 text-primary transition-all\"\r\n          )}\r\n        >\r\n          <motion.div layout>\r\n            <Icon className=\"size-5\" />\r\n          </motion.div>\r\n          {open && (\r\n            <motion.span\r\n              layout\r\n              initial={{ opacity: 0, y: 12 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: 0.2 }}\r\n              className=\"text-xs font-medium\"\r\n            >\r\n              {title}\r\n            </motion.span>\r\n          )}\r\n          {notifications && open && (\r\n            <motion.span\r\n              layout\r\n              initial={{ opacity: 0, y: 12 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: 0.2 }}\r\n              className=\"text-xs font-medium text-primary bg-primary/30 px-1 h-full rounded-sm ml-auto mr-2\"\r\n            >\r\n              {notifications}\r\n            </motion.span>\r\n          )}\r\n        </Link>\r\n      </li>\r\n    </Hint>\r\n  );\r\n};\r\n\r\nconst UsageMeter = ({\r\n  progress,\r\n  open,\r\n}: {\r\n  progress: number;\r\n  open: boolean;\r\n}) => {\r\n  const [isDismissed, setIsDismissed] = useState(false);\r\n  const maxScore = 100;\r\n  const progressInPercentage = (progress / maxScore) * 100;\r\n  const strokeWidth = 15;\r\n  const radius = 70;\r\n  const circumference = 2 * Math.PI * radius;\r\n  const strokeDashoffset =\r\n    circumference - (progressInPercentage / 100) * circumference;\r\n  if (isDismissed) return null;\r\n\r\n  if (open) {\r\n    return (\r\n      <div className=\"bg-primary/30 p-2 rounded-md text-primary text-sm space-y-3\">\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 12 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.2 }}\r\n          layout\r\n          className=\"\"\r\n        >\r\n          <span className=\"block font-semibold\">Used Space</span>\r\n          <span>\r\n            Your team has used 80% of your available space. Need more?\r\n          </span>\r\n        </motion.div>\r\n        <motion.div\r\n          layout\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          transition={{ delay: 0.25 }}\r\n        >\r\n          <Progress value={progress} />\r\n        </motion.div>\r\n\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 12 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.125 }}\r\n          className=\"flex gap-2 text-xs\"\r\n        >\r\n          <button\r\n            onClick={() => setIsDismissed(true)}\r\n            className=\"hover:underline\"\r\n          >\r\n            Dismiss\r\n          </button>\r\n          <Link className=\"hover:underline\" href=\"/upgrade\">\r\n            Upgrade plan\r\n          </Link>\r\n        </motion.div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <motion.div layout className=\"relative\">\r\n        <svg className=\"size-10 -rotate-90 transform\" viewBox=\"0 0 160 160\">\r\n          <circle\r\n            className=\"text-gray-200 transition-all duration-300 ease-in-out\"\r\n            strokeWidth={strokeWidth}\r\n            stroke=\"currentColor\"\r\n            fill=\"transparent\"\r\n            r={radius}\r\n            cx=\"80\"\r\n            cy=\"80\"\r\n          />\r\n          <motion.circle\r\n            initial={{ strokeDashoffset: circumference }}\r\n            animate={{ strokeDashoffset }}\r\n            className=\"text-primary transition-all duration-500 ease-in-out\"\r\n            strokeWidth={strokeWidth}\r\n            strokeDasharray={circumference}\r\n            strokeLinecap=\"round\"\r\n            stroke=\"currentColor\"\r\n            fill=\"transparent\"\r\n            r={radius}\r\n            cx=\"80\"\r\n            cy=\"80\"\r\n          />\r\n        </svg>\r\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\r\n          <span className=\"text-sm font-bold text-primary\">{progress}</span>\r\n        </div>\r\n      </motion.div>\r\n    );\r\n  }\r\n};\r\n\r\nconst ToggleClose = ({\r\n  open,\r\n  setOpen,\r\n}: {\r\n  open: boolean;\r\n  setOpen: Dispatch<SetStateAction<boolean>>;\r\n}) => {\r\n  return (\r\n    <button\r\n      className=\"flex w-full items-center p-2 hover:bg-primary/30 rounded-md\"\r\n      onClick={() => setOpen((prev) => !prev)}\r\n    >\r\n      {open && (\r\n        <motion.span layout className=\"text-sm font-medium\">\r\n          Collapse\r\n        </motion.span>\r\n      )}\r\n      <motion.div layout className=\"ml-auto\">\r\n        <ChevronLeft\r\n          className={cn(\r\n            !open && \"rotate-180\",\r\n            \"size-5 text-background/70 transition-all duration-300 ease-in-out\"\r\n          )}\r\n        />\r\n      </motion.div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Sidebar02;\r\n",
      "path": "block/sidebar-02/sidebar-02.tsx",
      "target": "components/block/sidebar-02/sidebar-02.tsx"
    }
  ]
}